<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>英语问答</title>
      <link href="/2023/021710159.html"/>
      <url>/2023/021710159.html</url>
      
        <content type="html"><![CDATA[<h1 id="英语问答"><a href="#英语问答" class="headerlink" title="英语问答"></a>英语问答</h1><blockquote><p><strong>1    Please introduce yourself in English.（自我介绍）</strong></p></blockquote><p>Respect professors：</p><p>Good morning. I am very glad to be here for this interview. Now allow me to give a brief introduction. </p><p>At first, my name is ？？？, a twenty-one years old  boy. I come from  Kaifeng, a city with a long cultural history of  Henan Province. I will graduate from China University of mining and technology, and I major in information Security. </p><p>Second, in my studies, I have achieved great academic grades, and I have received National Inspirational Scholarship two times. Meanwhile, I actively participate in a number of competitions and have many scientific research experiences. In terms of competitions, I received first prize in the China Engineering Robot Competition.  Additionally, I took charge of a provincial innovation and participated in a school innovation. These projects have exercised my innovation and research skills.</p><p>At last,  ？？University is always my dream. This reminds me of a sentence. “for you, thousands of times.” So I cherish this opportunity very much.  </p><p>Thank you so much for your time and I sincerely wish you have a pleasant day! Thank you.</p><blockquote><p><strong>2    Say a little about your hobbies（爱好）</strong></p></blockquote><p>I like listening to songs quietly, and My favorite singer is Jay Chou. Because When I am in trouble, songs can make me calm down. When I am very tired, songs can bring me strength. When I am angry with something，songs can also make me happy with life again. In my opinion， Listening to music keeps me in a good mood and reminds me of the past. This is my hobby, not just a hobby, but also a true friend.</p><p>我喜欢静静地听歌，我最喜欢的歌手是周。当我遇到麻烦时，歌曲可以让我平静下来。当我很累的时候，它可以给我带来力量。当我对某事感到愤怒时，它也能让我重新享受生活。在我看来，听音乐让我保持良好的心情，让我想起过去。这是我的爱好，不仅仅是一个爱好，也是一个真正的朋友。</p><blockquote><p><strong>3    Say a little about your hometown（介绍家乡：清明上河园、开封府）</strong></p></blockquote><p>I come from  Kaifeng, a city with a long cultural history of  Henan Province. It was the capital of the Northern Song Dynasty and once one of the greatest cities in the world. It is the ancient capital of seven dynasties and has many beautiful scenery. it has many places of interest, such as Kaifeng mansion, Longting, Qingming Shanghe garden. Many tourists come to visit every year. And I hope teachers can have time to visit Kaifeng. I believe  it can leave a deep impression on everyone. Thank you.</p><p>我来自河南省文化历史悠久的城市开封。 它是北宋的首都，曾经是世界上最伟大的城市之一。 是七朝古都，风景秀丽。 开封名胜古迹众多，如开封府、龙亭、清明上河园等。 每年都有很多游客前来参观。 也希望老师们有时间去开封看看。 我相信一定会给你留下深刻的印象。 谢谢你。</p><blockquote><p><strong>4    Introduce your project（介绍项目，我介绍的项目是中国工程机器人）</strong></p></blockquote><p>I want to introduce the project of China engineering robot competition. In this competition project, my teammates and I need to build a biped walking robot and complete the functions of walking, forward and backward somersault. I am responsible for conducting experimental debugging repeatedly to find the action combination with complementary errors. </p><p>In this process, I learned that how to do scientific research and how to cooperate with team members to complete tasks.</p><p>我想介绍一下中国工程机器人大赛的项目。在这个比赛项目中，我和我的队友需要建造一个两足步行机器人，并完成行走、向前和向后空翻的功能。我负责设计行走速度调节算法，并且重复性地进行实验调试来寻找误差互补的动作组合。</p><blockquote><p><strong>5    Your work and achievements in the project （你在项目中的工作与收获）</strong></p></blockquote><p>These projects have exercised my innovation and research skills. In this process, I learned how to do scientific research, how to analyze and solve problems alone, and how to cooperate with team members to complete tasks. In addition, I have confidence in my English ability, which gives me the advantage of reading or translating foreign languages.</p><p>这些项目锻炼了我的创新和研究技能。在这个过程中，我学会了如何做科学研究，如何独自分析和解决问题，以及如何与团队成员合作完成任务时。此外，我对自己的英语能力有信心，这让我阅读或翻译外文的优势。</p><blockquote><p><strong>6    What is your plan for your graduate study（介绍规划：“介绍研究生规划”“你研究生阶段的计划”）</strong></p></blockquote><p>In the graduate stage, I want to read professional literature and books extensively, exchange academic difficulties with teachers, and assist my teachers to carry out team research. After school life, I will participate in sports to ensure that I have a healthy body.</p><p>在研究生阶段，我想广泛阅读专业文献和书籍，与老师交流学术困难，并协助老师进行团队研究。放学后，我会参加运动，以确保我有一个健康的身体。</p><p>或者</p><p>In the first year of master’s student, I need to study graduate courses seriously and keep working hard. And I need to improve my academic English level and strengthen the training of English reading and writing ability. In addition, I also need to read widely and pay attention to the frontier of the discipline.</p><p>In the second year of master’s student, I need to constantly improve my scientific research ability, constantly pursue innovation, strive to make high-level achievements, publish high-quality papers, and climb the academic peak</p><p>In the third year of master’s student, I hope to finish my master’s thesis and try my best to publish it in internationally renowned journals. Finally, I hope to give full play to my professional strength and work potential, and maximize my life value</p><p>在我研究生院的第一年，我需要认真学习研究生课程并继续努力。我需要提高我的学术英语水平，加强英语阅读和写作能力的训练。此外，我还需要广泛阅读，关注学科前沿。</p><p>在我研究生院的第二年，我需要不断提升科研能力，不断追求创新，力争做出高水平的成果，发表高质量的论文，勇攀学术高峰。</p><p>在研究生的第三年，我希望完成硕士论文并尽自己最大努力发表在国际出名期刊。最后，我希望充分发挥自身的专业实力和工作潜力，最大化实现自己的人生价值</p><blockquote><p><strong>7    Why do you choose to go to graduate school（你为什么要选择读研究生？）</strong></p></blockquote><p>Because I found that there are many interesting research during the University. I want to improve my professional skills and satisfy my curiosity at the graduate stage. And in today’s society, a higher degree means more opportunities.</p><p>首先，我发现在大学期间有很多有趣的研究方向。我想提高我的专业技能，满足我在研究生阶段的好奇心。在当今社会，更高的学位意味着更多的机会。</p><blockquote><p><strong>8    What is your favorite subject during your undergraduate period（本科期间你最喜欢的科目是什么）</strong></p><p>​      <strong>Please introduce your major （介绍专业，我的答案同这个类似）</strong></p></blockquote><p>My favorite subject is network security. This course helps me understand the general process of network attacks, and security defense techniques, and cultivate security awareness. At the same time, it also improves my practical ability, such as network scanning and sniffing, password cracking and network spoofing. This course broadens my horizons and arouses my interest in network security.</p><p>我最喜欢的科目是网络安全。本课程帮助我了解了网络攻击的一般过程和网络安全防御技术，培养了网络安全意识。同时，它还提高了实用能力，如网络扫描和嗅探、密码破解和网络欺骗。这门课程开阔了我的视野，激发了我对网络安全的兴趣。</p><blockquote><p><strong>9    Why choose ？？University?（为什么选择某某大学？）</strong></p></blockquote><p>On one hand, ？？University is always my dream. It is a well-known and powerful university in China. On the other hand, The teachers here have a high academic level. Here I can meet more excellent people and learn from them, and make myself better. </p><p>一方面，某某大学一直是我的梦想。它是中国一所著名而强大的大学。另一方面，这里的教师学术水平很高。在这里，我可以结识更多优秀的人，向他们学习，让自己变得更好。</p><blockquote><p><strong>10    What is your greatest  strength and weakness（“优缺点”）</strong></p></blockquote><p>My advantage is willing to communicate, self-motivated. And I have a good sense of teamwork.<br>My weakness is that always strive for perfection in doing things and not thoughtful enough.</p><p>我的优势是愿意沟通和自我激励。<br>我的缺点是做事总是力求完美，考虑不够周到。</p><p>优点主要三点：</p><ul><li>我拥有良好的身体素质和规律的生活习惯，因为我喜欢运动，每天我都会抽出一定的时间来跑步，每年也都会参加马拉松，得益于这份坚持，我身体素质非常好，研究生阶段的科研生活需要强健的身心，因此我认为在这方面我很有优势。</li><li>我担任过学习委员和部门副部长，性格比较沉稳，做事认真负责，能够将大家团结在一起，擅长和师兄师姐、老师交流，所以我认为我具有很强的团结协作意识和沟通能力</li><li>我一个不断追求上进的人，竞赛和项目经历较丰富，是一个具有很强进取精神和开拓创新意识的人</li></ul><p>最大的缺点就是：</p><ul><li>读的书籍不多，虽然在本科期间也读过和本科专业相关的书籍，但是我很清楚，这还远远不够，所以很希望在研究生期间多读一些和专业相关的书籍，从而不断丰富自己和提升自己</li><li>还有，我认为最大缺点就是专业排名，我认为可以通过专业排名表扬一个人，但不能定义一个人，我希望通过我的科研项目经历和个人能力，还有我对？？的热枕之心能够得到老师认可，最后谢谢老师</li></ul><blockquote><p><strong>11 Introducing the University (介绍大学)</strong></p></blockquote><p>The first time l entered the campus as a freshman, I was deeply attracted by her cultural atmosphere and historical connotation. </p><p>On one hand, catching up with the times, CUMT is modern and smart.  It has many beautiful scenery and has a long historical background. On the other hand, My campus activities are rich and colorful. l think that I have a wonderful life in my campus.</p><blockquote><p><strong>12    Say a little about your Xu Zhou（大学所处的城市）</strong></p></blockquote><p>Xuzhou is located in the northwest of Jiangsu Province, only 300 kilometers away from Nanjing. The original name of Xuzhou is “Peng Cheng”, with 6000-year splendid culture. During its long history Xuzhou has proved to be a town of great strategic importance. Xuzhou is called the cross-road of five provinces. Now it has a complete transportation system of air, rail, highways and waterways, which brings great convenience to travelers and business people. Meanwhile, as a beautiful city with a long history, Xuzhou has many places of interest, among which Tombs of Han Dynasty and Yun Long scenic spot should be highlighted. Because of its great cultural heritage and profound historical background, it is also called “Athens of the East”.</p><p>徐州位于江苏省西北部，距南京仅300公里。徐州原名“彭城”，有着6000年灿烂的文化底蕴。徐州历史悠久，是一个具有重要战略意义的城市。徐州历史上被称为五省的十字路口。现在它有一个完整的航空、铁路、公路和水路运输系统，这给旅行者和商务人士带来了极大的便利。同时，徐州作为一座历史悠久的美丽城市，拥有众多的历史遗迹和名胜古迹，其中汉墓和云龙风景名胜区应该是重点。由于其巨大的文化遗产、历史遗迹和深厚的历史背景，它也被称为“东方的雅典”。</p><blockquote><p><strong>13    What impressed you most during your college years（大学期间的深刻印象）</strong></p></blockquote><p>I think the most impressive thing is school new year’s party. In my freshman year, I attended the school new year’s party with my club friends. We performed a program called collective birthday about supporting education. Children left behind in mountainous areas have no birthdays. We hope to pass warmth in this way. This is the most impressive thing for me.</p><blockquote><p><strong>14    Could you tell the importance of English? (您觉得英语重要吗)</strong></p></blockquote><p>Yes, it’s very important. It plays an indispensable role both in my academic study and future career. When I look for some learning materials on-line, the Chinese information is usually not enough, and thus the English information works as an essential compensation.</p><p>是的，这很重要。它在我的学术学习和未来的职业生涯中都起着不可或缺的作用。当我在网上为我的研究论文寻找学习材料时，中文信息通常是不够的，因此英文信息是一种必要的补偿。</p><blockquote><p><strong>15    How do you feel about your progress today? （对于你至今所取得的进步你是怎样看的？）</strong></p></blockquote><p>To be frank, I made a great progress in the past few years with the help of my classmates and friends. What is more important is that I learn to work with others and now I have a good sense of teamwork. All in all, the last few years are really important for me.</p><p>坦率地说，在过去几年里，在同学和朋友的帮助下，我取得了很大的进步。更重要的是，我学会了与他人合作，现在我有了良好的团队合作意识。总之，过去几年对我来说真的很重要。</p><blockquote><p><strong>16 Introduce your best friend（介绍一下你最好的朋友？）</strong></p></blockquote><p>My best friend is my former junior high school classmate, our friendship has been 10 years. He is very sincere and often helps others in his life. Whenever I encounter difficulties, he always encourages me and gives me confidence. He studies very hard, so I believe his future is bright.</p>]]></content>
      
      
      <categories>
          
          <category> 保研复试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali搭建数据库</title>
      <link href="/2022/022320073.html"/>
      <url>/2022/022320073.html</url>
      
        <content type="html"><![CDATA[<h1 id="kali-搭建SQli注入数据库"><a href="#kali-搭建SQli注入数据库" class="headerlink" title="kali 搭建SQli注入数据库"></a>kali 搭建SQli注入数据库</h1><p><strong>一、创建数据库</strong></p><p>1.连接 MySQL</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -u root -p        密码：d    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.查看当前的数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建数据库名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database 名字;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.创建数据库时设置字符编码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database 名字 character set utf8;create database 名字 charset utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看和显示数据库的编码方式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show create database 名字;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改数据库编码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter database 名字 character set utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.进入或切换数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use 库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 显示当前数据库<br>进入数据库中，来查看当前处于哪个数据库中。<br>长时间操作数据库时，在很多数据库中来回切换后，查看当前的数据库，避免操作错了数据库。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select database();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>二、创建数据表</strong></p><p>1.查看当前数据库中的表，查看当前数据库中有哪些表。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.创建表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table login(ID char(20),Password char(20));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.显示表信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show create table login;或desc login；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/kali搭建数据库/0.png" alt></p><p>4.给表增加字段，为已存在的表添加一个新字段。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add 字段名 字段类型—CHAR(20);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.删除表的字段，删除一个表中已存在的字段。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 drop 字段名; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.修改字段的数据类型，修改表中现有字段的数据类型。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 modify 字段名 数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.修改字段的数据类型并且改名，修改表中现有字段的字段名和类型。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 change 原字段名 新字段名 数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>三、创建字段信息</strong></p><p>1.在表login中添加字段内容。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into login values('LLD','admin');insert into login values('cumt','password');insert into login values('admin','123456');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/kali搭建数据库/image-20211203154809028.png" alt></p><p>2显示表login所有的字段内容。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from login；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA语言及网络编程作业</title>
      <link href="/2022/012625167.html"/>
      <url>/2022/012625167.html</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA：作业一"><a href="#JAVA：作业一" class="headerlink" title="JAVA：作业一"></a>JAVA：作业一</h2><blockquote><p>1、    计算多项式1！+2！+3！…+n!，当多项式之和超过10000时停止，并输出累加之和以及n的值。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> aa <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>            sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span>  ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ans <span class="token operator">*=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sum <span class="token operator">+=</span> ans<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"累加和sum："</span><span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对应的n："</span><span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2、    从标准输入端输入一个字符，判断字符是数字、还是西文字母还是其他的字符。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> aa <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span>  ans <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span>  <span class="token punctuation">(</span>ans<span class="token operator">&gt;=</span> <span class="token char">'a'</span>  <span class="token operator">&amp;&amp;</span> ans<span class="token operator">&lt;=</span> <span class="token char">'z'</span> <span class="token operator">||</span> ans<span class="token operator">&gt;=</span> <span class="token char">'A'</span>  <span class="token operator">&amp;&amp;</span> ans<span class="token operator">&lt;=</span> <span class="token char">'Z'</span>  <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token operator">+</span> <span class="token string">" 是西文字母"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>  <span class="token keyword">if</span>  <span class="token punctuation">(</span>ans<span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span>ans<span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token operator">+</span> <span class="token string">" 是数字"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token operator">+</span> <span class="token string">" 是其他字符"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3、    利用辗转相除法（欧几里得算法）求两个正整数的最大公约数。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> aa <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入两个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">" 和 "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" 的最大公约数为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4、    假设一个数在1000到1100之间，那除以3结果余2,；除以5结果余3,；除以7结果余2（中国剩余定理），求此数。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> aa <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ans <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> ans <span class="token operator">&lt;=</span> <span class="token number">1100</span><span class="token punctuation">;</span> ans<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> ans <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> ans <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>5、    小球从100米高度自由落下，每次触地后反弹到原来高度的一半，求第10次触地时经历的总路程以及第10次反弹高度。 </p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> aa <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> h <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+=</span> h<span class="token punctuation">;</span>            h <span class="token operator">=</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> h<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第10次触地时经历的总路程："</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第10次反弹高度："</span> <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JAVA：作业二"><a href="#JAVA：作业二" class="headerlink" title="JAVA：作业二"></a>JAVA：作业二</h2><h3 id="1-读程序，写结果"><a href="#1-读程序，写结果" class="headerlink" title="1 读程序，写结果"></a>1 读程序，写结果</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">D</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"A and D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">A</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"A and A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">B</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"B and B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">A</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"B and A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">C</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"C and C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">B</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"C and B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">D</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"D and D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token class-name">B</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"D and B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> mainTest <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">A</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">A</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">D</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">a1<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">a1<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">a1<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">a2<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">a2<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">a2<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">b<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">b<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">b<span class="token punctuation">.</span></span>Show</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目分析：</p><blockquote><ol><li><p>A a1 = new A()；父类引用实例化父类对象，调用A中的方法，但是没有B类作为参数，因此以参数类型为A的方法优先调用，打印出<strong>A and A</strong>。</p></li><li><p>A a1 = new A()；父类引用实例化父类对象，调用A中的方法，但是没有C类作为参数，因此以参数类型为A的方法优先调用，打印出<strong>A and A。</strong></p></li><li><p>A a1 = new A()；父类引用实例化父类对象，调用A中参数类型为D的方法，打印结果是<strong>A and D</strong>。</p><p>​        A a2 = new B()；父类引用a2指向子类对象，向上转型，即调用父类的方法，当父类中的方法被子类重写后，就需要调用重写后的方法，注：a2的类型是A。</p></li><li><p>A中show方法的参数没有是B的，但是参数b为A类的子类对象，向上转型，调用show（A obj），但show(A obj)已经被重写为return (“B and A”)。打印出<strong>B and A</strong>。</p></li><li><p>同理4，打印出<strong>B and A</strong>。</p></li><li><p>同理4，打印出<strong>A and D</strong>。</p><p>​        B b = new B()；b为B类，调用b.show()方法，B类的show方法有继承的show(D obj)和本身的show(B obj)、show(A obj)。</p></li><li><p>调用show（B obj），打印出<strong>B and B</strong>。</p></li><li><p>向上转型，调用show（B obj），打印出<strong>B and B</strong>。</p></li><li><p>调用show（D obj），打印出<strong>A and D</strong>。</p></li></ol></blockquote><p>最终答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> and <span class="token class-name">A</span>  <span class="token class-name">A</span> and <span class="token class-name">A</span>  <span class="token class-name">A</span> and <span class="token class-name">D</span>  <span class="token class-name">B</span> and <span class="token class-name">A</span>  <span class="token class-name">B</span> and <span class="token class-name">A</span>  <span class="token class-name">A</span> and <span class="token class-name">D</span>  <span class="token class-name">B</span> and <span class="token class-name">B</span>  <span class="token class-name">B</span> and <span class="token class-name">B</span>  <span class="token class-name">A</span> and <span class="token class-name">D</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-读程序，写结果"><a href="#2-读程序，写结果" class="headerlink" title="2 读程序，写结果"></a>2 读程序，写结果</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"base"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">tellName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tellName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base tell name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dervied</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"dervied"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Dervied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">tellName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tellName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dervied tell name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Dervied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目分析：</p><blockquote><p>子类调用父类构造器完成初始化，在父类里调用了tellName()，但这个方法被子类重写了，输出子类成员变量name的值，此时name在子类的值还是null，并未赋值：dervied，所以，输出了null。</p><p>成员变量是在进入构造器之后被赋值：dervied；输出dervied。</p></blockquote><p>最终答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Dervied</span> tell name<span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token class-name">Dervied</span> tell name<span class="token operator">:</span> dervied  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-生成动物"><a href="#3-生成动物" class="headerlink" title="3 生成动物"></a>3 生成动物</h3><blockquote><p>1 ）循环通过标准输入端输入需要生成的动物，当遇到结束标志，则结束程序运行。</p><p>结束标准为：break</p><p>2 ）每次生成动物，通过标准输出端显示动物的信息。</p><p>3 ）动物的信息包括：目前所有动物的总数，当前这一类动物的总数。</p><p>4 ）整个程序结构用工厂模式设计，保证将来动物园有新的动物加入时，程序可扩展。</p></blockquote><p><img src="/img/JAVA语言及网络编程作业/0.png" alt></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count_all <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count_all <span class="token operator">=</span> count_all <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物的总数为："</span> <span class="token operator">+</span> count_all <span class="token operator">+</span> <span class="token string">"只"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count_cat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set_cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count_cat <span class="token operator">=</span> count_cat <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫的数量为："</span> <span class="token operator">+</span> count_cat <span class="token operator">+</span> <span class="token string">" 只"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count_duck <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set_duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count_duck <span class="token operator">=</span> count_duck <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子的数量为："</span> <span class="token operator">+</span> count_duck <span class="token operator">+</span> <span class="token string">" 只"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count_dog <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set_dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count_dog <span class="token operator">=</span> count_dog <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗的数量为："</span> <span class="token operator">+</span> count_dog <span class="token operator">+</span> <span class="token string">" 只"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cat</span> cat_d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Duck</span> duck_d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Tiger</span> tiger_d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dog</span> dog_d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要添加的动物（输入break即可结束）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"cat"</span><span class="token operator">:</span>                    cat_d<span class="token punctuation">.</span><span class="token function">set_cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"duck"</span><span class="token operator">:</span>                    duck_d<span class="token punctuation">.</span><span class="token function">set_duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"tiger"</span><span class="token operator">:</span>                    tiger_d<span class="token punctuation">.</span><span class="token function">set_tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"dog"</span><span class="token operator">:</span>                    dog_d<span class="token punctuation">.</span><span class="token function">set_dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"break"</span><span class="token operator">:</span>                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入正确的动物名称！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JAVA：作业三"><a href="#JAVA：作业三" class="headerlink" title="JAVA：作业三"></a>JAVA：作业三</h2><h3 id="1-学生管理系统"><a href="#1-学生管理系统" class="headerlink" title="1 学生管理系统"></a>1 学生管理系统</h3><blockquote><p>用泛型List管理学生信息，学生对象信息为</p><p>姓名  学号   年龄  专业</p><p>对学生列表完成：添加，删除，查找，全部显示操作。</p></blockquote><p>学生类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">stu_manage</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> stu_id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> stu_pro<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> stu_id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> stu_pro<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stu_id <span class="token operator">=</span> stu_id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stu_pro <span class="token operator">=</span> stu_pro<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStu_id</span><span class="token punctuation">(</span><span class="token class-name">String</span> stu_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stu_id <span class="token operator">=</span> stu_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">String</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStu_pro</span><span class="token punctuation">(</span><span class="token class-name">String</span> stu_pro<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stu_pro <span class="token operator">=</span> stu_pro<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stu_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStu_pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stu_pro<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">stu_manage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu_manager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> new_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"08190499"</span><span class="token punctuation">,</span> <span class="token string">"LiLingdi"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"information security"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> new_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"08190500"</span><span class="token punctuation">,</span> <span class="token string">"ZhangMing"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"civil Engineering"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>new_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>new_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*--------Welcome to the student management system--------*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1：Add student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2：Find student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3：Delete student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4：Edit student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5：View all students"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6：Exit system"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*---------------------------------------------------------*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter your choice："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Add student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">addStudent</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Find student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">findStudent</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Delete student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">deleteStudent</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Edit student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">updateStudent</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"5"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"View all students"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">findAllStudent</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"6"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thanks for using"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加学生信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> stu_id<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter student ID："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stu_id <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">isUsed</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> stu_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The student ID you entered is used, please re-enter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the student's name："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the age of the student："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the student's major："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> stu_pro <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setStu_id</span><span class="token punctuation">(</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setStu_pro</span><span class="token punctuation">(</span>stu_pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Add student successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断学号是否存在</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUsed</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">,</span> <span class="token class-name">String</span> stu_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Student</span> s <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//查找某一个学生</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findStudent</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the student ID you are looking for："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Student</span> s <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The entered student number does not exist, please enter the correct student number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Found student successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"student ID"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"Professional"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> s <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getStu_pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//删除学生</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteStudent</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No student information, please add a student first, and then delete it！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Please enter the student ID of the student to be deleted："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> stu_id <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Student</span> s <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stu_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The entered student number does not exist, please enter the correct student number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            arrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Successfully deleted student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//修改学生信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No student information, please add student information first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter student ID："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> inde <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Student</span> student <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                inde <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//判断学号是否存在系统中，如果不存在提示出错</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inde <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The entered student number does not exist, please enter the correct student number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the student's new name："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the student’s new age："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the student's new major："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> major <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> major<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Student</span> student <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arrayList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//查看系统中所有学生的信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findAllStudent</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No student information, please add student information first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"student ID"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> <span class="token string">"Professional"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Student</span> s <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getStu_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-15s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getStu_pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 学生管理系统界面</p><p><img src="/img/JAVA语言及网络编程作业/1.png" alt></p><p>2 查看学生管理系统中所有的学生：</p><p><img src="/img/JAVA语言及网络编程作业/2.png" alt></p><p>3 添加学生</p><p><img src="/img/JAVA语言及网络编程作业/3.png" alt></p><p><img src="/img/JAVA语言及网络编程作业/4.png" alt></p><p>4 查找学号为08190500的学生</p><p><img src="/img/JAVA语言及网络编程作业/5.png" alt></p><p>5 删除学号为08190499的学生</p><p><img src="/img/JAVA语言及网络编程作业/6.png" alt></p><p><img src="/img/JAVA语言及网络编程作业/7.png" alt></p><p>6修改学号为08190500的学生信息</p><p><img src="/img/JAVA语言及网络编程作业/8.png" alt></p><p><img src="/img/JAVA语言及网络编程作业/9.png" alt></p><p>7关闭学生管理系统</p><p><img src="/img/JAVA语言及网络编程作业/10.png" alt></p><h3 id="2-二元一次方程组"><a href="#2-二元一次方程组" class="headerlink" title="2    二元一次方程组"></a>2    二元一次方程组</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">quadratic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">RoundingMode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DecimalFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> qua_equation <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一元二次方程表达式为：ax^2＋bx＋c＝0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入方程的系数a、b、c (同时为0，终止程序)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>            a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DecimalFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"0.000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> flag<span class="token punctuation">;</span>            <span class="token keyword">double</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">;</span>            flag <span class="token operator">=</span> b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方程不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此方程为一元一次方程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> b<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方程的解为："</span> <span class="token operator">+</span> <span class="token function">tran_decimal</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方程不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x1 <span class="token operator">=</span> b <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">2.0</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>                x2 <span class="token operator">=</span> b <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">2.0</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方程有两个相同实根, x1 =  "</span>                        <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",  x2 = "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>                x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方程有两个不同实根, x1 = "</span>                        <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",  x2 = "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">double</span> s<span class="token punctuation">,</span> x<span class="token punctuation">;</span>                s <span class="token operator">=</span> <span class="token operator">-</span>b <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>                x <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>flag<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方程有虚根, x1 = "</span>                        <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" + "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"i,  x2 = "</span>                        <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BigDecimal</span> <span class="token function">tran_decimal</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BigDecimal</span> bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将n的值赋给形参bd</span>        <span class="token keyword">return</span> bd<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><p>第一种情况：只有常数项：提示方程不存在。</p><p>第二种情况：x+2=0：提示方程为一元一次方程。</p><p>第三种情况：x2-7x+12=0：方程有两个不同的实根。</p><p>第四种情况：x2+2x+3=0：存在虚根。</p><p><img src="/img/JAVA语言及网络编程作业/11.png" alt></p><p>GUI</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">equation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Panel_equ</span> <span class="token keyword">extends</span> <span class="token class-name">Panel</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">JTextField</span> text1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">JTextField</span> text2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">JTextField</span> text3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">JButton</span> button2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"清空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">JButton</span> button3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Panel_equ</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JLabel</span> label1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"二次项系数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JLabel</span> label2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"一次项系数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JLabel</span> label3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"常数项:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>text3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        button2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Frame_equ<span class="token punctuation">.</span>CustomActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button2<span class="token punctuation">)</span><span class="token punctuation">;</span>        button3<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Frame_equ<span class="token punctuation">.</span>CustomActionListener2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button3<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">equation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">BorderLayout</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JTextArea</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Frame_equ</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">Panel_equ</span> panel<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">JTextArea</span> textArea<span class="token punctuation">;</span>    <span class="token class-name">Calculate_equ</span> s1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Frame_equ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"一元二次方程 1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel_equ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Panel_equ</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textArea<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textArea<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculate_equ</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">Panel_equ</span><span class="token punctuation">.</span>text1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">Panel_equ</span><span class="token punctuation">.</span>text2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">Panel_equ</span><span class="token punctuation">.</span>text3<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">s1<span class="token punctuation">.</span></span>Solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//序列化</span>            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"file1.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ObjectOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//反序列化</span>            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"file1.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token class-name">Calculate_equ</span>  temp <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Calculate_equ</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二次项系数："</span><span class="token operator">+</span>temp<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次项系数："</span><span class="token operator">+</span>temp<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"常数项系数："</span><span class="token operator">+</span>temp<span class="token punctuation">.</span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解："</span><span class="token operator">+</span><span class="token class-name">Calculate_equ</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Calculate_equ</span><span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token string">"文本框没有输入内容！"</span><span class="token punctuation">;</span>            textArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Calculate_equ</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoQuadratic</span> e2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Calculate_equ</span><span class="token punctuation">.</span>m <span class="token operator">=</span>e2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            textArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Calculate_equ</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        textArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Calculate_equ</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomActionListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Panel_equ</span><span class="token punctuation">.</span>text1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Panel_equ</span><span class="token punctuation">.</span>text2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Panel_equ</span><span class="token punctuation">.</span>text3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            textArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomActionListener2</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">equation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DecimalFormat</span><span class="token punctuation">;</span><span class="token comment">//自定义异常，二次项系数为0</span><span class="token keyword">class</span> <span class="token class-name">NoQuadratic</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> mess<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NoQuadratic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mess <span class="token operator">=</span> <span class="token string">"此方程不是一元二次方程！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mess<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// A是二次方系数；B是一次放系数；C是常数项系数；x1,x2用于存储两个根；m返回信息；s是实部；x是虚部；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculate_equ</span>  <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">A</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">B</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">C</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> m<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Calculate_equ</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span> <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>C</span> <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">A</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">B</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">C</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//求解两根</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoQuadratic</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> flag <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>C</span><span class="token punctuation">;</span>        <span class="token class-name">DecimalFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"0.000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoQuadratic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>flag<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token string">"方程有虚根, x1 = "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" + "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"i,  x2 = "</span>                    <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"i"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> x1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>B</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>A</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token string">"方程有两个实根，x1 = "</span> <span class="token operator">+</span> x1 <span class="token operator">+</span> <span class="token string">"    x2 = "</span> <span class="token operator">+</span> x2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">equation</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Start_equ</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Frame_equ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形界面：</p><p><img src="/img/JAVA语言及网络编程作业/12.png" alt></p><p>输入一元二次方程的三个系数。</p><p>1 不是一元二次方程，<strong>抛出异常</strong>。</p><p><img src="/img/JAVA语言及网络编程作业/13.png" alt></p><p>2 存在实根。</p><p><img src="/img/JAVA语言及网络编程作业/14.png" alt></p><p>3 存在虚根。</p><p><img src="/img/JAVA语言及网络编程作业/15.png" alt></p><p>4 清空按钮，可以看到清空按钮上有上次点击的标记，可以有效证明按钮可行。</p><p><img src="/img/JAVA语言及网络编程作业/16.png" alt></p><p>5 退出，可行。</p><p>6 把生成的一元二次方程对象（包含根的值）序列化并保存在文件file1.data中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//序列化并保存在file.data</span>            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"file1.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ObjectOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/JAVA语言及网络编程作业/17.png" alt></p><p>7 反序列化结果显示在命令行界面中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//反序列化输出</span>            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"file1.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token class-name">Calculate_equ</span>  temp <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Calculate_equ</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二次项系数："</span><span class="token operator">+</span>temp<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次项系数："</span><span class="token operator">+</span>temp<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"常数项系数："</span><span class="token operator">+</span>temp<span class="token punctuation">.</span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解："</span><span class="token operator">+</span><span class="token class-name">Calculate_equ</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/JAVA语言及网络编程作业/18.png" alt></p><h2 id="JAVA：作业四"><a href="#JAVA：作业四" class="headerlink" title="JAVA：作业四"></a>JAVA：作业四</h2><h3 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1 正则表达式"></a>1 正则表达式</h3><blockquote><p>输入三个字符串判断 满足密码复杂性要求（认证需求）；满足身份证号码规范（15/18）；满足电子邮件规范</p></blockquote><p><strong>判断密码的复杂性</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">four_job</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> password <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPsw</span><span class="token punctuation">(</span><span class="token class-name">String</span> psword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> psword<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">kind_Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">8</span> <span class="token operator">||</span> pwd<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"(.{3,})(?=.{3,}\\1)"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 大小写字母.数字.其它符号check</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">".*\\d+.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">".*[a-z]+.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">".*[A-Z]+.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">".*[\\p{P}\\p{S}]+.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>判断身份证号规范</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">four_job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">GregorianCalendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> idcard <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> VALIDITY <span class="token operator">=</span> <span class="token string">"该身份证有效！"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> NUMBER <span class="token operator">=</span> <span class="token string">"身份证号码长度应该为15位或18位。"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DIGITS <span class="token operator">=</span> <span class="token string">"身份证15位号码都应为数字 ; 18位号码除最后一位外，都应为数字。"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BIRTH <span class="token operator">=</span> <span class="token string">"身份证出生日期无效。"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RANGE <span class="token operator">=</span> <span class="token string">"身份证生日不在有效范围。"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MONTH <span class="token operator">=</span> <span class="token string">"身份证月份无效"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DAY <span class="token operator">=</span> <span class="token string">"身份证日期无效"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AREA <span class="token operator">=</span> <span class="token string">"身份证地区编码错误。"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ILLEGAL <span class="token operator">=</span> <span class="token string">"不是合法的身份证号码"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">IDCardValidate</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">IDStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> tipInfo <span class="token operator">=</span> VALIDITY<span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token class-name">Ai</span><span class="token punctuation">;</span>        <span class="token comment">// 判断号码的长度 15位或18位</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">IDStr</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">15</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">IDStr</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tipInfo <span class="token operator">=</span> NUMBER<span class="token punctuation">;</span>            <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 18位身份证前17位位数字，如果是15位的身份证则所有号码都为数字</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">IDStr</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Ai</span> <span class="token operator">=</span> <span class="token class-name">IDStr</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Ai</span> <span class="token operator">=</span> <span class="token class-name">IDStr</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"19"</span> <span class="token operator">+</span> <span class="token class-name">IDStr</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token class-name">Ai</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tipInfo <span class="token operator">=</span> DIGITS<span class="token punctuation">;</span>            <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 判断出生年月是否有效</span>        <span class="token class-name">String</span> strYear <span class="token operator">=</span> <span class="token class-name">Ai</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strMonth <span class="token operator">=</span> <span class="token class-name">Ai</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strDay <span class="token operator">=</span> <span class="token class-name">Ai</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Date</span><span class="token punctuation">(</span>strYear <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> strMonth <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> strDay<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tipInfo <span class="token operator">=</span> BIRTH<span class="token punctuation">;</span>            <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">GregorianCalendar</span> gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>gc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strYear<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">150</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span>gc<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strYear <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> strMonth <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> strDay<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tipInfo <span class="token operator">=</span> RANGE<span class="token punctuation">;</span>                <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> <span class="token operator">|</span> <span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strMonth<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">12</span> <span class="token operator">||</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strMonth<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tipInfo <span class="token operator">=</span> MONTH<span class="token punctuation">;</span>            <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strDay<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">31</span> <span class="token operator">||</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strDay<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tipInfo <span class="token operator">=</span> DAY<span class="token punctuation">;</span>            <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 判断地区码是否有效</span>        <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> areacode <span class="token operator">=</span> <span class="token class-name">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果身份证前两位的地区码不在Hashtable，则地区码有误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>areacode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Ai</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tipInfo <span class="token operator">=</span> AREA<span class="token punctuation">;</span>            <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Varycode</span><span class="token punctuation">(</span><span class="token class-name">Ai</span><span class="token punctuation">,</span> <span class="token class-name">IDStr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tipInfo <span class="token operator">=</span> ILLEGAL<span class="token punctuation">;</span>            <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tipInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//对第18位进行校验</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Varycode</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Ai</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">IDStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">VarifyCode</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Wi</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Ai</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">Wi</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> modValue <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strVerifyCode <span class="token operator">=</span> <span class="token class-name">VarifyCode</span><span class="token punctuation">[</span>modValue<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Ai</span> <span class="token operator">=</span> <span class="token class-name">Ai</span> <span class="token operator">+</span> strVerifyCode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">IDStr</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Ai</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">IDStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断字符串是否位数字</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token class-name">String</span> strnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[0-9]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> isNum <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>strnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> isNum<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断出生日期是否正确</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">String</span> strDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>                <span class="token string">"^((\\d{2}(([02468][048])|([13579][26]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d{2}(([02468][1235679])|([13579][01345789]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))?$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>strDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断身份证上的地址是否正确</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">,</span> <span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"13"</span><span class="token punctuation">,</span> <span class="token string">"河北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"14"</span><span class="token punctuation">,</span> <span class="token string">"山西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"15"</span><span class="token punctuation">,</span> <span class="token string">"内蒙古"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"21"</span><span class="token punctuation">,</span> <span class="token string">"辽宁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"吉林"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"黑龙江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"31"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"江苏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"33"</span><span class="token punctuation">,</span> <span class="token string">"浙江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"34"</span><span class="token punctuation">,</span> <span class="token string">"安徽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"35"</span><span class="token punctuation">,</span> <span class="token string">"福建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"36"</span><span class="token punctuation">,</span> <span class="token string">"江西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"37"</span><span class="token punctuation">,</span> <span class="token string">"山东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"41"</span><span class="token punctuation">,</span> <span class="token string">"河南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"42"</span><span class="token punctuation">,</span> <span class="token string">"湖北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"43"</span><span class="token punctuation">,</span> <span class="token string">"湖南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"44"</span><span class="token punctuation">,</span> <span class="token string">"广东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"45"</span><span class="token punctuation">,</span> <span class="token string">"广西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"46"</span><span class="token punctuation">,</span> <span class="token string">"海南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"50"</span><span class="token punctuation">,</span> <span class="token string">"重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"51"</span><span class="token punctuation">,</span> <span class="token string">"四川"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"52"</span><span class="token punctuation">,</span> <span class="token string">"贵州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"53"</span><span class="token punctuation">,</span> <span class="token string">"云南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"54"</span><span class="token punctuation">,</span> <span class="token string">"西藏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"61"</span><span class="token punctuation">,</span> <span class="token string">"陕西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"62"</span><span class="token punctuation">,</span> <span class="token string">"甘肃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"63"</span><span class="token punctuation">,</span> <span class="token string">"青海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"64"</span><span class="token punctuation">,</span> <span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"65"</span><span class="token punctuation">,</span> <span class="token string">"新疆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"71"</span><span class="token punctuation">,</span> <span class="token string">"台湾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"81"</span><span class="token punctuation">,</span> <span class="token string">"香港"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"82"</span><span class="token punctuation">,</span> <span class="token string">"澳门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"91"</span><span class="token punctuation">,</span> <span class="token string">"国外"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>判断电子邮件的规范性</strong></p><p>@左边的限制：</p><blockquote><ul><li>由a～z的英文字母（不区分大小写）开头</li><li>可由英文字母、0～9的数字、点、减号或下划线组成</li><li>长度为3～18个字符</li><li>不能以点、减号结尾</li></ul></blockquote><p>@右边的限制：</p><blockquote><ul><li>只能有一个点，点和”@”之间不能为空</li><li>可由英文字母、0～9的数字、点、减号或下划线组成</li><li>不能以点、减号或下划线结尾</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">four_job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> email <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> emaill<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set_email</span><span class="token punctuation">(</span><span class="token class-name">String</span> new_emil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emaill <span class="token operator">=</span> new_emil<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>emaill <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>emaill<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"^(\\w+([-.][A-Za-z0-9]+)*){3,18}@\\w+([-.][A-Za-z0-9]+)*\\.\\w+([-.][A-Za-z0-9]+)*$"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emaill<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正确性验证：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">four_job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> four_one <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        password psw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        email obj_email <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请选择：\n[P]密码复杂性判断    [I]身份证号码规范判断    [E]电子邮件规范判断    [Q]终止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> type <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token char">'P'</span> <span class="token operator">||</span> type <span class="token operator">==</span> <span class="token char">'p'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Scanner</span> scan_one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> psword <span class="token operator">=</span> scan_one<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                psw<span class="token punctuation">.</span><span class="token function">setPsw</span><span class="token punctuation">(</span>psword<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>psw<span class="token punctuation">.</span><span class="token function">kind_Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满足密码复杂性要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不满足密码复杂性要求!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token char">'I'</span> <span class="token operator">||</span> type <span class="token operator">==</span> <span class="token char">'i'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Scanner</span> scan_three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入身份证号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> <span class="token class-name">IdCard</span> <span class="token operator">=</span> scan_three<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">idcard<span class="token punctuation">.</span></span>IDCardValidate</span><span class="token punctuation">(</span><span class="token class-name">IdCard</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token char">'E'</span> <span class="token operator">||</span> type <span class="token operator">==</span> <span class="token char">'e'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Scanner</span> scan_two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入电子邮件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> new_email <span class="token operator">=</span> scan_two<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                obj_email<span class="token punctuation">.</span><span class="token function">set_email</span><span class="token punctuation">(</span>new_email<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj_email<span class="token punctuation">.</span><span class="token function">isValidEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电子邮件规范"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电子邮件不规范！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token char">'Q'</span> <span class="token operator">||</span> type <span class="token operator">==</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>密码复杂性验证</strong></p><p><img src="/img/JAVA语言及网络编程作业/19.png" alt></p><p><strong>身份证号规范性验证</strong></p><p><img src="/img/JAVA语言及网络编程作业/20.png" alt></p><p><img src="/img/JAVA语言及网络编程作业/21.png" alt></p><p><strong>电子邮件规范验证</strong></p><p><img src="/img/JAVA语言及网络编程作业/22.png" alt></p><h3 id="2-绘制动态图形"><a href="#2-绘制动态图形" class="headerlink" title="2 绘制动态图形"></a>2 绘制动态图形</h3><blockquote><p>利用鼠标事件启动3个线程分别在三个窗口中同时绘制动态图形</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">four_job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">equation<span class="token punctuation">.</span></span><span class="token class-name">Frame_equ</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> even_mouse <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">even_mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>                        <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建窗体对象</span>        <span class="token class-name">Frame</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"JAVA Job_4.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更改布局方式</span>        f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建按钮对象</span>        <span class="token class-name">JButton</span> bu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置按钮大小</span>        bu<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把按钮添加到窗体</span>        f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bu<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给窗体加一个关闭事件</span>        f<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给按钮添加一个事件</span>        <span class="token comment">//ActionListener动作监听</span>        bu<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                even_mouse my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">even_mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                even_mouse my_two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">even_mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                even_mouse my_three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">even_mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my_two<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my_three<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my_two<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my_three<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果演示：</p><p><img src="/img/JAVA语言及网络编程作业/23.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学课程作业</title>
      <link href="/2022/012565183.html"/>
      <url>/2022/012565183.html</url>
      
        <content type="html"><![CDATA[<h1 id="密码学课程作业"><a href="#密码学课程作业" class="headerlink" title="密码学课程作业"></a>密码学课程作业</h1><h2 id="1-仿射密码"><a href="#1-仿射密码" class="headerlink" title="1 仿射密码"></a>1 仿射密码</h2><p>密文：</p><p>FMXVED KAPHFERBND KRXRSREFMORUD SD KD VSHVUFED KAPRKD LYEVLRHHRH</p><p>明文：</p><p>algorithmsarequitegeneraldefinitionsofarithmeticprocesses</p><p>algorithms are quite general definitions of arithmetic processes</p><p>统计26个英文字母在密文中的频率分布</p><div class="table-container"><table><thead><tr><th>字母</th><th>频率</th><th>字母</th><th>频率</th></tr></thead><tbody><tr><td>A</td><td>2</td><td>N</td><td>1</td></tr><tr><td>B</td><td>1</td><td>O</td><td>1</td></tr><tr><td>C</td><td>0</td><td>P</td><td>2</td></tr><tr><td>D</td><td>7</td><td>Q</td><td>0</td></tr><tr><td>E</td><td>5</td><td>R</td><td>8</td></tr><tr><td>F</td><td>4</td><td>S</td><td>3</td></tr><tr><td>G</td><td>0</td><td>T</td><td>0</td></tr><tr><td>H</td><td>5</td><td>U</td><td>2</td></tr><tr><td>I</td><td>0</td><td>V</td><td>4</td></tr><tr><td>J</td><td>0</td><td>W</td><td>0</td></tr><tr><td>K</td><td>5</td><td>X</td><td>2</td></tr><tr><td>L</td><td>2</td><td>Y</td><td>1</td></tr><tr><td>M</td><td>2</td><td>Z</td><td>0</td></tr></tbody></table></div><p>频率较高的前五位是：R    D    E    H    K</p><p>按照英文字母的频率统计，推测R就是E，D就是T</p><p>设仿射加密函数为</p><script type="math/tex; mode=display">e(x)≡ax+b(mod26)</script><p>联立解a，b的值，检查gcd(a，26)=1是否成立</p><p>（1）推测R是E，D是T</p><script type="math/tex; mode=display">e(4)=17，e(19)=3</script><p>解得：</p><script type="math/tex; mode=display">a=6，b=16，gcd(a，26)=2</script><p>（2）推测R是E，E是T</p><script type="math/tex; mode=display">e(4)=17，e(19)=4</script><p>解得：</p><script type="math/tex; mode=display">a=13，b=17，gcd(a，26)=13</script><p>（3）推测R是E，H是T</p><script type="math/tex; mode=display">e(4)=17，e(19)=7</script><p>解得：</p><script type="math/tex; mode=display">a=8，b=11，gcd(a，26)=2</script><p>（4）推测R是E，K是T</p><script type="math/tex; mode=display">e(4)=17，e(19)=10</script><p>解得：</p><script type="math/tex; mode=display">a=3，b=5，gcd(a，26)=1</script><p>a的逆元：</p><script type="math/tex; mode=display">a^{-1}(mod26）=9</script><p>推测出R就是E，K就是T，进而算出：</p><p>加密：</p><script type="math/tex; mode=display">e(x) = (3x+5) mod 26</script><p>解密：</p><script type="math/tex; mode=display">d(y) = 9(y-5) mod 26</script><p>最后求出明文为：</p><p>algorithms are quite general definitions of arithmetic processes</p><h2 id="2-单表密码分析"><a href="#2-单表密码分析" class="headerlink" title="2 单表密码分析"></a>2 单表密码分析</h2><p>明文和密文之间的关系是一一对应的。</p><p>v    密文：<br>YKHLBA <strong>JCZ</strong> SVIJ JZB LZVHI JCZ VHJ DR IZXKHLBA VSS RDHEI DR YVJV LBXSKYLBA YLALJVS IFZZXC CVI LEFHDNZY EVBTRDSY JCZ FHLEVHT HZVIDB RDH JCLI CVI WZZB <strong>JCZ</strong> VYNZBJ DR ELXHDZSZXJHDBLXI JCZ XDEFSZQLJT DR JCZ RKBXJLDBI JCVJ XVB BDP WZ FZHRDHEZY WT <strong>JCZ</strong> EVXCLBZ CVI HLIZB YHVEVJLXVSST VI V HZIKSJ DR JCLI JCVJ PZHZ DBXZ XDBILYZHZY IZXKHZ VHZ BDP WHZVMVWSZ</p><p>这段密文还有338个字母，按出现次数由多到少的顺序排列，依次为Z，J，V，B，H，D，I，L，C，X，S ，Y，E，R，T，F， K，A，W，N， P， M，Q，U，G，O。</p><p>由于Z出现的次数高于其它字母，推断z对应明文字母e，看到jcz 出现了三次，英文中最常用的三个字的单词就是the，所以先锁定这三个的翻译，从这里打开突破口，推断J对面明文字母t，C对应明文字母h。继而密文JCVJ中，我们判断V对应明文字母a，即为that。再观察JZB，我们进行可能的试探，得到结果为ten，即B对应n。密文VI，V为a，猜测I为明文的s，即as。我们继续猜测VSS，S对应明文中的l，即all。猜测DR中，D代表o，故DR可能代表or on of ok中的一个，or意味着明文字母r与自身相对应，显然不和理。由于B代表n，所以也不是on。那么R必代表f或k。如果代表k，则RDH译为kor，不合理，故R代表明文f，即of。基于此，我们对密文不断尝试和拆解，得到明密文对应表：</p><div class="table-container"><table><thead><tr><th>明文</th><th>密文</th><th>明文</th><th>密文</th></tr></thead><tbody><tr><td>a</td><td>V</td><td>n</td><td>B</td></tr><tr><td>b</td><td>W</td><td>o</td><td>D</td></tr><tr><td>c</td><td>X</td><td>p</td><td>F</td></tr><tr><td>d</td><td>Y</td><td>q</td><td>G</td></tr><tr><td>e</td><td>Z</td><td>r</td><td>H</td></tr><tr><td>f</td><td>R</td><td>s</td><td>I</td></tr><tr><td>g</td><td>A</td><td>t</td><td>J</td></tr><tr><td>h</td><td>C</td><td>u</td><td>K</td></tr><tr><td>i</td><td>L</td><td>v</td><td>N</td></tr><tr><td>j</td><td>O</td><td>w</td><td>P</td></tr><tr><td>k</td><td>M</td><td>x</td><td>Q</td></tr><tr><td>l</td><td>S</td><td>y</td><td>T</td></tr><tr><td>m</td><td>E</td><td>z</td><td>U</td></tr></tbody></table></div><p>依据上表，对密文求解得到明文：</p><p>during the last ten years the art of securing all forms of data including digital speech has improved manyfold primary reason for this has been the advent of microelectronics the complexity of the function that can now be performed by the machine has risen dramatically as a result of this recentdevelopment technology many of the cipher system that were once considered secure are now breakable</p><h2 id="3-维吉尼亚"><a href="#3-维吉尼亚" class="headerlink" title="3 维吉尼亚"></a>3 维吉尼亚</h2><p>密文：</p><p>CHREEVOAHMAERATBIAXXWTNXBEEOPHBSBQMQEQERBWRVXUOAKXAOSXXWEAHBWGJMMQMNKGRFVG<br>XWTRZXWIAKLXFPSKAUTEMNDCMGTSXMXBTUIADNGMGPSRELXNJELXVRVPRTULHDNQWTWDTYGBPHXTF<br>ALJHASVBFXNGLLCHRZBWELEKMSJIKNBHWRJGNMGJSGLXFEYPHAGNRBIEQJTAMRVLCRREMNDGLXRRIMG<br>NSNRWCHRQHAEYEVTAQEBBIPEEWEVKAKOEWADREMXMTBHHCHRTKDNVRZCHRCLQOHPWQAIIWXNR<br>MGWOIIFKEE</p><p>大致思路：1 确定密钥长度    2 确定密钥    3 根据密钥恢复明文，最后得到：</p><p>秘钥：</p><p>janet</p><p>明文：</p><p>the almond tree was in tentative blossom the days were longer often ending with magnificent evenings of corrugated pink skies the hunting season was over with hounds and guns put away for six months the vineyards were busy again as the well organized farmers treated their vines and the more lackadaisical neighbors hurried to do the pruning they should have done in november</p><p>Python如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wordninja<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token string">''</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            c <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>letter_to_numberber<span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> letter_to_numberber<span class="token punctuation">(</span>k<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            c <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>letter_to_numberber<span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> letter_to_numberber<span class="token punctuation">(</span>k<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            c <span class="token operator">+=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> c<span class="token comment"># 带有密钥的解密</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> <span class="token string">''</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>letter_to_numberber<span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> letter_to_numberber<span class="token punctuation">(</span>k<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>letter_to_numberber<span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> letter_to_numberber<span class="token punctuation">(</span>k<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            m <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    m <span class="token operator">=</span> m<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token comment"># 获取唯密文解密时的密钥</span><span class="token keyword">def</span> <span class="token function">crack</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span> <span class="token string">''</span>    c <span class="token operator">=</span> c<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 删除特殊符号</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">if</span> ch<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cipher <span class="token operator">+=</span> ch    keylength <span class="token operator">=</span> get_length<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>    key <span class="token operator">=</span> get_key<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> keylength<span class="token punctuation">)</span>    key <span class="token operator">=</span> key<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> key<span class="token comment"># 获取密钥长度</span><span class="token comment"># 遍历3-20位,相同间隔的字母相同数最多的位数,即最有可能为密钥长度</span><span class="token keyword">def</span> <span class="token function">get_length</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>    keyLen <span class="token operator">=</span> <span class="token number">1</span>    maxCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 密钥长度3-20位</span>    <span class="token keyword">for</span> step <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span> <span class="token operator">-</span> step<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> cipher<span class="token punctuation">[</span>i <span class="token operator">-</span> step<span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> count <span class="token operator">&gt;</span> maxCount<span class="token punctuation">:</span>            maxCount <span class="token operator">=</span> count            keyLen <span class="token operator">=</span> step    <span class="token keyword">return</span> keyLen<span class="token comment"># 确定密钥</span><span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">''</span>    Standard <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.082</span><span class="token punctuation">,</span> <span class="token number">0.015</span><span class="token punctuation">,</span> <span class="token number">0.028</span><span class="token punctuation">,</span> <span class="token number">0.043</span><span class="token punctuation">,</span> <span class="token number">0.127</span><span class="token punctuation">,</span> <span class="token number">0.022</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">,</span> <span class="token number">0.061</span><span class="token punctuation">,</span> <span class="token number">0.07</span><span class="token punctuation">,</span> <span class="token number">0.002</span><span class="token punctuation">,</span> <span class="token number">0.008</span><span class="token punctuation">,</span> <span class="token number">0.04</span><span class="token punctuation">,</span> <span class="token number">0.024</span><span class="token punctuation">,</span>                 <span class="token number">0.067</span><span class="token punctuation">,</span> <span class="token number">0.075</span><span class="token punctuation">,</span> <span class="token number">0.019</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">0.06</span><span class="token punctuation">,</span> <span class="token number">0.063</span><span class="token punctuation">,</span> <span class="token number">0.091</span><span class="token punctuation">,</span> <span class="token number">0.028</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.023</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">]</span>    cipher_matrix <span class="token operator">=</span> matrix<span class="token punctuation">(</span>text<span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        col <span class="token operator">=</span> <span class="token punctuation">[</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> cipher_matrix<span class="token punctuation">]</span>        freq <span class="token operator">=</span> letter_frequency<span class="token punctuation">(</span>col<span class="token punctuation">)</span>        Coin_index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            index <span class="token operator">=</span> <span class="token number">0.00000</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                index <span class="token operator">+=</span> freq<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> Standard<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            Coin_index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span>            freq <span class="token operator">=</span> freq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> freq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>        temp <span class="token operator">=</span> <span class="token number">1</span>        ch <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Coin_index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>Coin_index<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.065546</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">:</span>                temp <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>Coin_index<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.065546</span><span class="token punctuation">)</span>                ch <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span>        key <span class="token operator">+=</span> ch    <span class="token keyword">return</span> key<span class="token comment"># 统计a-z字母出现的频率</span><span class="token keyword">def</span> <span class="token function">letter_frequency</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    freq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> ch <span class="token keyword">in</span> text<span class="token punctuation">:</span>            <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>        freq<span class="token punctuation">.</span>append<span class="token punctuation">(</span>count <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> freq<span class="token comment"># 二维矩阵表示密文，行：用密钥加密,列：同一个字母移位加密的</span><span class="token keyword">def</span> <span class="token function">matrix</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    cipher_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> text<span class="token punctuation">:</span>        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            cipher_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> cipher_matrix<span class="token comment"># 将字母转换为数字</span><span class="token keyword">def</span> <span class="token function">letter_to_numberber</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span>    <span class="token keyword">elif</span> s<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        mode <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[E]加密\t[D]解密\t[C]唯密文\t[Q]结束\n"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token keyword">or</span> mode <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入明文:\n"</span><span class="token punctuation">)</span>                key <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密钥:\n"</span><span class="token punctuation">)</span>                cipher <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"得到密文:\n"</span> <span class="token operator">+</span> cipher<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误!"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'D'</span> <span class="token keyword">or</span> mode <span class="token operator">==</span> <span class="token string">'d'</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                cipher <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密文:\n"</span><span class="token punctuation">)</span>                key <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密钥:\n"</span><span class="token punctuation">)</span>                message <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> key<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>wordninja<span class="token punctuation">.</span>split<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误!"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'C'</span> <span class="token keyword">or</span> mode <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                cipher <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密文:\n"</span><span class="token punctuation">)</span>                key <span class="token operator">=</span> crack<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜测得到密钥:\n"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>                message <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> key<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>wordninja<span class="token punctuation">.</span>split<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误!"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'Q'</span> <span class="token keyword">or</span> mode <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CBC字节翻转攻击"><a href="#4-CBC字节翻转攻击" class="headerlink" title="4 CBC字节翻转攻击"></a>4 CBC字节翻转攻击</h2><p><img src="/img/密码学课程作业/1.jpg" alt></p><p>打开容器后看到登录页面</p><p><img src="/img/密码学课程作业/2.png" alt></p><p>通过dirsearch扫一下目录发现扫除一个.index.php.swp文件</p><p><img src="/img/密码学课程作业/3.png" alt></p><p>get请求获取文件</p><p><img src="/img/密码学课程作业/4.png" alt></p><p>打不开，拿到kali用vi去修复 ，命令为vi -r index.php.swp，进入修复后的文件</p><p><img src="/img/密码学课程作业/5.png" alt></p><p>代码：</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;title&gt;Login Form&lt;/title&gt;&lt;link href="static/css/style.css" rel="stylesheet" type="text/css" /&gt;&lt;script type="text/javascript" src="static/js/jquery.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;$(document).ready(function() {    $(".username").focus(function() {        $(".user-icon").css("left","-48px");    });    $(".username").blur(function() {        $(".user-icon").css("left","0px");    });    $(".password").focus(function() {        $(".pass-icon").css("left","-48px");    });    $(".password").blur(function() {        $(".pass-icon").css("left","0px");    });});&lt;/script&gt;&lt;/head&gt;&lt;?phpdefine("SECRET_KEY", file_get_contents('/root/key'));define("METHOD", "aes-128-cbc");session_start();function get_random_iv(){    $random_iv='';    for($i=0;$i&lt;16;$i++){        $random_iv.=chr(rand(1,255));    }    return $random_iv;}function login($info){    $iv = get_random_iv();    $plain = serialize($info);    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);    $_SESSION['username'] = $info['username'];    setcookie("iv", base64_encode($iv));    setcookie("cipher", base64_encode($cipher));}function check_login(){    if(isset($_COOKIE['cipher']) &amp;&amp; isset($_COOKIE['iv'])){        $cipher = base64_decode($_COOKIE['cipher']);        $iv = base64_decode($_COOKIE["iv"]);        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)){            $info = unserialize($plain) or die("&lt;p&gt;base64_decode('".base64_encode($plain)."') can't unserialize&lt;/p&gt;");            $_SESSION['username'] = $info['username'];        }else{            die("ERROR!");        }    }}function show_homepage(){    if ($_SESSION["username"]==='admin'){        echo '&lt;p&gt;Hello admin&lt;/p&gt;';        echo '&lt;p&gt;Flag is $flag&lt;/p&gt;';    }else{        echo '&lt;p&gt;hello '.$_SESSION['username'].'&lt;/p&gt;';        echo '&lt;p&gt;Only admin can see flag&lt;/p&gt;';    }    echo '&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;';}if(isset($_POST['username']) &amp;&amp; isset($_POST['password'])){    $username = (string)$_POST['username'];    $password = (string)$_POST['password'];    if($username === 'admin'){        exit('&lt;p&gt;admin are not allowed to login&lt;/p&gt;');    }else{        $info = array('username'=&gt;$username,'password'=&gt;$password);        login($info);        show_homepage();    }}else{    if(isset($_SESSION["username"])){        check_login();        show_homepage();    }else{        echo '&lt;body class="login-body"&gt;                &lt;div id="wrapper"&gt;                    &lt;div class="user-icon"&gt;&lt;/div&gt;                    &lt;div class="pass-icon"&gt;&lt;/div&gt;                    &lt;form name="login-form" class="login-form" action="" method="post"&gt;                        &lt;div class="header"&gt;                        &lt;h1&gt;Login Form&lt;/h1&gt;                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;                        &lt;/div&gt;                        &lt;div class="content"&gt;                        &lt;input name="username" type="text" class="input username" value="Username" οnfοcus="this.value=\'\'" /&gt;                        &lt;input name="password" type="password" class="input password" value="Password" οnfοcus="this.value=\'\'" /&gt;                        &lt;/div&gt;                        &lt;div class="footer"&gt;                        &lt;input type="submit" name="submit" value="Login" class="button" /&gt;                        &lt;/div&gt;                    &lt;/form&gt;                &lt;/div&gt;            &lt;/body&gt;';    }}?&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码考察了CBC翻转攻击的利用。它禁止直接提交用户名为admin进行登陆，但是返回flag的条件又是session中用户名要是admin。所以需要构造类似”edmin”形式或者”aemin”等形式的用户名，之后通过修改iv和cipher，通过CBC翻转攻击将字符e还原成”admin”</p><p>我们从这里可以看到iv和cipher</p><p><img src="/img/密码学课程作业/6.png" alt></p><p>修改cipher，然后再bp中的cookie中设置iv和翻转后的cipher，提交。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> base64cipher <span class="token operator">=</span> <span class="token string">'RfttKSc%2FFSFXqS2L1Hl872eCmHECra3rEdHkyITq1g9B8yFWOMaqWE%2BVrSReNTgE6boqxxjEWgzbWwzTQOedBg%3D%3D'</span>cipher <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span>bytes_cipher <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token comment">#a:2:{s:8:"username";s:5:"edmin";s:8:"password";s:8:"password";}</span>bytes_cipher<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> bytes_cipher<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment">#将e修改为a</span>cipher <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>bytes_cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是出现服务器提示反序列化失败，原因是在我们修改edmin为admin的时候，是通过修改第一块数据来修改的，所以第一个块数据被破坏。程序中要求username要等于admin，所以不能利用文章里的说的填充字符。 第一个块数据被破坏，但第一个块数据是和IV有关，所以只要将在CBC字符翻转攻击，得到新的IV就可以修复第一块数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> base64iv <span class="token operator">=</span> <span class="token string">'xOuryflEZpmjJYRLPKW2eA%3D%3D'</span>plain <span class="token operator">=</span> <span class="token string">'sf0tBJxhhh2QbN8rhYku2W1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjg6IlBhc3Nvd3JkIjt9'</span>a <span class="token operator">=</span> <span class="token string">'a:2:{s:8:"userna'</span>iv <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span>plain <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>plain<span class="token punctuation">)</span> <span class="token comment">#提示的错误的plain</span>bytes_iv <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bytes_iv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>bytes_iv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>plain<span class="token punctuation">[</span>i<span class="token punctuation">]</span>iv <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>bytes_iv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token comment">#得到iv：FCy09x5W2rwJay4T3F72wA%3D%3D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把得到的新的修复的iv值替换掉，cipher仍然为翻转后的cipher，然后提交，查看返回包，就能拿到<strong>flag{d6a8f9dccca121b77a6f3cc7416fc3cb}</strong></p><p><strong>下面简单介绍一下CBC字节翻转攻击</strong></p><p>CBC加密的特性，简述来说：<br>明文首先被分割成等长的若干个明文块，每个明文块将作为下一个明文块加密过程中输入的一部分，从而影响到下一个明文块的加密结果。在一般情况下，明文会被分成等长的16字节的明文块，不足16字节部分，会用特殊填充符填充，图示如下：</p><p><img src="/img/密码学课程作业/7.png" alt></p><p>这其中有一个重要输入IV，是随机生成的初始向量，它影响第一个明文块的结果，并且将传递到整个加密链中，以保证对同一明文每次的加密结果都是不同的。<br><strong>CBC模式中涉及到的异或运算，是本次进行CBC翻转攻击的关键所在。</strong></p><p>类似于CBC加密的过程，CBC解密的过程也是将当前的密文块作为下一个密文块参与运算的输入，具体如图：</p><p><img src="/img/密码学课程作业/8.png" alt></p><p>假设我们修改了第一个密文块的第4个字节，那么根据CBC模式的解密，它将影响下一个密文块的解密结果，如图标红部分：</p><p><img src="/img/密码学课程作业/9.png" alt></p><p><strong>那么CBC翻转攻击如下：</strong></p><pre class="line-numbers language-none"><code class="language-none">我们知道已知A=B^C，可以得到结论B=A^C，并且也能得到A^C^B=0设第一块的第4个字节设为变量A，第二块的明文中第4个字节设为变量C，在第二块加密产生的第4个字节设为变量B因为A^B=C，根据结论有B=A^C如果人为将A变量值改变为A^C的结果，那么参与运算后A^B将等于A^C^B=B^B=0，第二个产生的明文的第4个字节将变为0如果将A变量值改变为A^C^X（这里X是任意字符），那么参与运算后，A^B将等于A^C^X^B=B^X^B=X，第二个产生的明文的第4个字节将变为X字符，这样，第二块密文块解密的结果就可控了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-SM3算法PPT制作"><a href="#5-SM3算法PPT制作" class="headerlink" title="5 SM3算法PPT制作"></a>5 SM3算法PPT制作</h2><h2 id="6-实践反哺理论，谈谈这门课"><a href="#6-实践反哺理论，谈谈这门课" class="headerlink" title="6 实践反哺理论，谈谈这门课"></a>6 实践反哺理论，谈谈这门课</h2>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/010216107.html"/>
      <url>/2022/010216107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
